[project]
name = "dpkg-scanpackages-py"
version = "0.0.1"
requires-python = ">=3.10"
authors = [{ name = "Tim HÃ¶rmann" }, { email = "t.hoermann@audivir.de" }]
description = "A fork of supermamon/dpkg-scanpackages-py"
readme = "README.md"
dependencies = [
  "pydpkg"
]


[project.urls]
homepage = "https://www.audivir.de/"
repository = "https://github.com/tim25651/dpkg-scanpackages-py"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dpkg_scanpackages"]

[project.scripts]
custom-repo = "custom_repo.main:main"
custom-repo-restart = "custom_repo.main:restart"

[project.optional-dependencies] # CHANGE: ? sometimes types - mostly no changes needed
dev = ["mypy", "pytest", "pylint", "coverage[toml]", "pytest-timeout", "types-tqdm"]


# [build-system]
# requires = ["scikit-build-core>=0.10", "pybind11"]
# build-backend = "scikit_build_core.build"


[tool.scikit-build]
wheel.expand-macos-universal-tags = true
minimum-version = "build-system.requires"


[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  "error",
  "ignore::pytest.PytestCacheWarning",
  "ignore::DeprecationWarning",
]
testpaths = ["tests"]


[tool.cibuildwheel]
build-frontend = "build[uv]"
test-command = "pytest {project}/tests"
test-extras = ["test"]

[tool.cibuildwheel.pyodide]
build-frontend = { name = "build", args = ["--exports", "whole_archive"] }

[tool.mypy]
python_version = "3.10" # CHANGE: PYTHON VERSION
enable_error_code = '''type-arg,no-untyped-def,redundant-cast,redundant-self,comparison-overlap,
                    no-untyped-call,no-any-return,no-any-unimported,unreachable,redundant-expr,
                    possibly-undefined,truthy-bool,truthy-iterable,ignore-without-code,
                    unused-awaitable,unused-ignore,explicit-override,unimported-reveal'''
disable_error_code = 'import-untyped'
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
exclude = ["build", "docs"]

[tool.coverage.run]
source = ["src"]
command_line = "-m pytest"
branch = true

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", 'if __name__ == "__main__":']
fail_under = 100
show_missing = true

[tool.ruff]
fix = true
show-fixes = true

exclude = [".git", ".idea", ".mypy_cache", ".tox", ".venv"]

target-version = "py310" # CHANGE: PYTHON VERSION
line-length = 88
indent-width = 4


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true

[tool.ruff.lint]
dummy-variable-rgx = "^(dummy_.*|unused_.*|_)$"

select = ["ALL"]
fixable = ["ALL"]
# extend-select = [
#   "B",           # flake8-bugbear
#   "I",           # isort
#   "ARG",         # flake8-unused-arguments
#   "C4",          # flake8-comprehensions
#   "EM",          # flake8-errmsg
#   "ICN",         # flake8-import-conventions
#   "G",           # flake8-logging-format
#   "PGH",         # pygrep-hooks
#   "PIE",         # flake8-pie
#   "PL",          # pylint
#   "PT",          # flake8-pytest-style
#   "PTH",         # flake8-use-pathlib
#   "RET",         # flake8-return
#   "RUF",         # Ruff-specific
#   "SIM",         # flake8-simplify
#   "T20",         # flake8-print
#   "UP",          # pyupgrade
#   "YTT",         # flake8-2020
#   "EXE",         # flake8-executable
#   "NPY",         # NumPy specific rules
#   "PD",          # pandas-vet
# ]
#ignore = [
#  "PLR09",    # Too many X
#  "PLR2004",  # Magic comparison
#]
ignore = [
  "ISC001", # implicit-str-concat
  "COM812", # missing-trailing-comma

  # ALLOW PICKLE USE
  "S301", # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue

  # IGNORE TODO
  "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
  "TD003",  # Missing issue link on the line following this TODO
  "FIX002", # Line contains TODO, consider resolving the issue

  "FBT001", # Boolean-typed positional argument in function definition
  "FBT002", # Boolean default positional argument
  "FBT003", # Boolean positional value in function call

  # "T201",  # `print` found

  "NPY002", # Replace legacy `np.random.permutation` call with `np.random.Generator.permutation`

  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`

  ## WE NEED TO REMOVE THESE LATER

  # EXCEPTIONS
  "EM101",  # Exception must not use a string literal, assign to variable first
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "TRY003", # Avoid specifying long messages outside the exception class
  "TRY300", # Use of else blocks in try/except

  # DOCSTRINGS
  #"D102",  # Missing docstring in public method
  #"D103",  # Missing docstring in public function
  "D105", # Missing docstring in magic method
  # "D107",  # Missing docstring in `__init__`
  #"D415",  # First line should end with a period, question mark, or exclamation point
]

# Ignore these when needed
# "A001"      # builtin-variable-shadowing
# "ERA001",   # commented-out-code
# "E501",     # line-too-long
# "PLR2004"   # magic-value-comparison
# "SLF001",   # private-member-access
# "SLOT000"   # no-slots-in-str-subclass
# "TCH001",   # typing-only-first-party-import
# "TCH002"    # typing-only-third-party-import

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
# Stub files for C extensions are allowed to have docstrings and overwrite __doc__, __version__, etc.
"_*.pyi" = ["PYI021", "A"]

# conf.py automatically created by Sphinx
"docs/conf.py" = ["INP001", "D100", "ERA001", "A"]

# Test files do not need to have docstrings at each test function
# S101: assert, PLR2004: magic value comparison, T20: print statements
"**/test_*.py" = ["INP001", "PLR2004", "S101", "D101", "D102", "D103", "T20"]
"tests/**" = ["INP001", "PLR2004", "S101", "D101", "D102", "D103", "T20"]

[tool.vulture]
ignore_names = ["_*", "unused_*"]
paths = ["src", ".whitelist"]
make_whitelist = true
sort_by_size = true
verbose = false

### UNUSED - AS THEY ARE INTEGRATED IN RUFF ###
[tool.isort]
profile = "black"
split_on_trailing_comma = false

[tool.black]
target-version = ["py310"] # CHANGE: PYTHON VERSION
line-length = 88

# include src and tests regex .pyi?$ to include type hints
include = '(src|examples|tests)\/.*\.py'

# unstable
unstable = true
skip-magic-trailing-comma = true

###

[tool.pylint.MAIN]
# CUSTOM: Minimum supported Python version.
py-version = "3.10" # CHANGE: PYTHON VERSION

ignore = "third_party"

ignore-patterns = '.*\.pyi$'

persistent = "no"

load-plugins = [
  "pylint.extensions.check_elif",
  "pylint.extensions.bad_builtin",
  "pylint.extensions.docparams",
  "pylint.extensions.for_any_all",
  "pylint.extensions.set_membership",
  "pylint.extensions.code_style",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.typing",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.comparison_placement",
  "pylint.extensions.mccabe",
]

# Files or directories to be skipped. They should be base names, not paths.
# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths.
# Pickle collected data for later comparisons.
# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# CUSTOM: All plugins are custom additions to the Google style guide.
# Use multiple processes to speed up Pylint.
# CUSTOM: 0 means to use the number of CPUs available.
jobs = 0 # custom change

unsafe-load-any-extension = "yes" # custom change
# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.


[tool.pylint."MESSAGES CONTROL"]

confidence = ""

# Enable the message, report, category or checker with the given id(s). You can# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.

enable = [
  "R",
  "use-symbolic-message-instead",
  "abstract-method",
  "attribute-defined-outside-init",
  "bad-option-value",
  "arguments-differ",
  "c-extension-no-member",
  "consider-using-enumerate",
  "useless-suppression",
  "no-member",
  "no-name-in-module",
  "wrong-import-order",
  "global-statement",
  "missing-function-docstring",
  "signature-differs",
  "unnecessary-pass",
  "useless-else-on-loop",
  "import-error",
  "import-self",
  "misplaced-comparison-constant",
  "trailing-newlines",
]

disable = [
  "implicit-str-concat",            # explicitly allowed by Google style guidesuppressed-message,
  "locally-disabled",
  "too-few-public-methods",
  "fixme",
  "consider-using-assignment-expr",
  "invalid-name",
  "too-complex",
  "protected-access",
  "unused-argument",
  "unused-import",
  "shadowed-import",
  "redefined-builtin",
  "redefined-outer-name",
  "line-too-long",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "pointless-statement",
  "consider-using-in",
  "import-outside-toplevel",
  "bad-mcs-classmethod-argument",
  "too-many-positional-arguments",
  "too-many-instance-attributes",
  "too-many-arguments",
  "too-many-locals",
]

# All enables are custom additions to the Google style guide.
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
# consider-using-assignment-expr is disabled because it doesn't help very much
# ruff:
# invalid-name, too-complex, protected-access, unused-argument, shadowed-import
# redefined-builtin, redefined-outer-name, line-too-long, missing-module-docstring,
# missing-class-docstring, missing-function-docstring
# pointless-statement, consider-using-in
# CUSTOM: Complete design section is a custom addition to the Google style guide.

[tool.pylint.DESIGN]

# Maximum number of arguments for function / method
max-args = 10

# Maximum number of locals for function / method body
max-locals = 25

# Maximum number of return / yield for function / method body
max-returns = 11

# Maximum number of branch for function / method body
max-branches = 27

# Maximum number of statements in function / method body
max-statements = 100

# Maximum number of parents for a class (see R0901).
max-parents = 7

ignored-parents = ""

# Maximum number of attributes for a class (see R0902).# List of qualified class names to ignore when counting class parents (see R0901).
max-attributes = 11

# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

# Maximum number of public methods for a class (see R0904).
max-public-methods = 25

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

exclude-too-few-public-methods = ""

max-complexity = 10
# List of regular expressions of class ancestor names to
# ignore when counting public methods (see R0903).


[tool.pylint.REPORTS]

output-format = "text"

reports = "no"

evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
# Tells whether to display a full report or only the messages
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=


[tool.pylint.BASIC]

good-names = ["main", "_"]

bad-names = ""

# Colon-delimited sets of names that determine each other's naming style whenname-group=

# Include a hint for the correct naming format with invalid-nameinclude-naming-hint=no

property-classes = [
  "abc.abstractproperty",
  "cached_property.cached_property",
  "cached_property.threaded_cached_property",
  "cached_property.cached_property_with_ttl",
  "cached_property.threaded_cached_property_with_ttl",
]

function-rgx = "^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$"

variable-rgx = "^[a-z][a-z0-9_]*$"

const-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

attr-rgx = "^_{0,2}[a-z][a-z0-9_]*$"

argument-rgx = "^[a-z][a-z0-9_]*$"

class-attribute-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

inlinevar-rgx = "^[a-z][a-z0-9_]*$"

class-rgx = "^_?[A-Z][a-zA-Z0-9]*$"

module-rgx = "^(_?[a-z][a-z0-9_]*|__init__)$"

method-rgx = "(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$"

no-docstring-rgx = "(__.*__|main|test.*|.*test|.*Test)$"

# Good variable names which should always be accepted, separated by a comma
# Bad variable names which should always be refused, separated by a comma
# the name regexes allow several styles.
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# Regular expression matching correct function names
# Regular expression matching correct variable names
# Regular expression matching correct constant names
# Regular expression matching correct attribute names
# Regular expression matching correct argument names
# Regular expression matching correct class attribute names
# Regular expression matching correct inline iteration names
# Regular expression matching correct class names
# Regular expression matching correct module names
# Regular expression matching correct method names
# Regular expression which should only match function or class names that do
# not require a docstring.
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = 12

[tool.pylint.TYPECHECK]

contextmanager-decorators = [
  "contextlib.contextmanager",
  "contextlib2.contextmanager",
]

ignored-modules = ""

# List of class names for which member attributes should not be checked (usefulignored-classes=optparse.Values,thread._local,_thread._local

generated-members = ""


[tool.pylint.FORMAT]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
# for classes with dynamically set attributes). This supports the use of
# qualified names.
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.

# Maximum number of characters on a single line.
max-line-length = 88 # custom change

# TODO(https://github.com/pylint-dev/pylint/issues/3352): Direct pylint to exempt
# lines made too long by directives to pytype.

ignore-long-lines = [
  "(?x)(",
  '^\s*(\#\ )?<?https?://\S+>?$',
  '^\s*(from\s+\S+\s+)?import\s+.+$)',
]

single-line-if-stmt = "yes"

# Regexp for a line that is allowed to be longer than the limit.
# Allow the body of an if to be on the same line as the test if there is no
# else.
# Maximum number of lines in a module
max-module-lines = 99999

# String used as indentation unit.  The internal Google style guide mandates 2
# spaces.  Google's externaly-published style guide says 4, consistent with
# PEP 8.  Here, we use 2 spaces, for conformity with many open-sourced Google
# projects (like TensorFlow).
indent-string = '    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren = 4

expected-line-ending-format = ""


[tool.pylint.MISCELLANEOUS]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.

notes = "TODO"
# List of note tags to take in consideration, separated by a comma.

[tool.pylint.STRING]

check-quote-consistency = "yes"


# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
[tool.pylint.VARIABLES]

init-import = "no"

dummy-variables-rgx = '^\*{0,2}(_$|unused_|dummy_)'

additional-builtins = ""

# List of strings which can identify a callback function by name. A callback
callbacks = ["cb_", "_cb"]

redefining-builtins-modules = [
  "six",
  "six.moves",
  "past.builtins",
  "future.builtins",
  "functools",
]


# Tells whether we should check for unused import in __init__ files.
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
# name must start or end with one of those strings.
# List of qualified module names which can have objects that can redefine
# builtins.
[tool.pylint.LOGGING]


logging-modules = ["logging", "absl.logging", "tensorflow.io.logging"]


# Logging modules to check that the string format arguments are in logging
# function parameter format
[tool.pylint.SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines = 4

ignore-comments = "yes"

ignore-docstrings = "yes"

ignore-imports = "yes"


# Ignore comments when computing similarities.
# Ignore docstrings when computing similarities.
# Ignore imports when computing similarities.
[tool.pylint.SPELLING]

spelling-dict = ""

# List of comma separated words that should not be checked.spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary inspelling-store-unknown-words=no


# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
# --spelling-private-dict-file option instead of raising a message.
[tool.pylint.IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules = ["regsub", "TERMIOS", "Bastion", "rexec", "sets"]

import-graph = ""

# Create a graph of external dependencies in the given file (report RP0402 mustext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 mustint-import-graph=

# Force import order to recognize a module as part of the standardknown-standard-library=

# Force import order to recognize a module as part of a third party library.known-third-party=enchant, absl

analyse-fallback-blocks = "no"


# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
# not be disabled)
# not be disabled)
# compatibility libraries.
# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
[tool.pylint.CLASSES]

defining-attr-methods = ["__init__", "__new__", "setUp"]

# List of member names, which should be excluded from the protected access
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls", "class_"]

# List of valid names for the first argument in a metaclass class method.valid-metaclass-classmethod-first-arg=mcs
# List of method names used to declare (i.e. assign) instance attributes.
# warning.
